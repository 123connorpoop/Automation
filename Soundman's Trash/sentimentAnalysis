/*

PREDICTIVE EMOTION CODE?

This code assigns a polar sentiment rating using the sentiment package to a provided voiceline, then, comparing the rating to similarly-scored
voicelines, retrives the pose of the most similar voiceline based on Jaccard distance. This is a token-based method that works on the
symbol level and thus should yield greater success than a method like Levenshtein distance.

Different characters should have different emotion tolerances. Apollo should have tight tolerance, Rarity wide, Phoenix mid.

*/

const jaccardDistance = require('@extra-string/jaccard-distance');    //npm i @extra-string/jaccard-distance
const Sentiment = require('sentiment');                               //npm i sentiment

var sentiment = new Sentiment();
var chkStr = "Jared is a writer. And I love him."
var tolerance = 1;

const dictionary = require('./apolloDictionary.js')

var tmpJaccard = new Map();

for (let [key, value] of dictionary) {

  var chkStrScore = sentiment.analyze(chkStr).score
  var baseScore = sentiment.analyze(`${key}`).score

  //console.log(sentiment.analyze(`${key}`).score +" "+ sentiment.analyze(chkStr).score + " " + jaccardDistance(`${key}`, chkStr) + " " + `${key}`);
  
  if ((baseScore >= chkStrScore - tolerance) && (baseScore <= chkStrScore + tolerance)) {
    tmpJaccard.set(jaccardDistance(`${key}`, chkStr), `${value}`)
  }

}

  //console.log(Math.min(... tmpJaccard.keys()))
  console.log(chkStr + " should have the pose " + tmpJaccard.get(Math.min(... tmpJaccard.keys())) + ".")